
üîê What Is OAuth 2.0?
    OAuth 2.0 is an authorization framework that lets apps access user data without 
    needing their password. Instead, users grant permission via a secure token.

üß≠ How Google Uses OAuth 2.0
Google implements OAuth 2.0 to allow apps to:
    * Let users sign in with their Google account
    * Access Google services like Gmail, Calendar, Drive, etc.

üõ†Ô∏è How It Works (Step-by-Step)
Here‚Äôs a simplified flow for a web app:

1- Register Your App
Go to the Google API Console and create a project.
Enable the APIs you want (e.g., Google Calendar).
Create OAuth 2.0 credentials (Client ID and Client Secret).

2- Redirect User to Google
Your app sends the user to Google‚Äôs OAuth 2.0 authorization endpoint.
You specify scopes (e.g., email, profile, calendar.readonly) to define what data you want.

3- User Grants Permission
Google shows a consent screen.
If the user agrees, Google redirects back to your app with an authorization code.

4- Exchange Code for Token
Your app sends the code to Google‚Äôs token endpoint.
Google responds with an access token (and optionally a refresh token).

5- Access Google APIs
Use the access token to make authorized API requests.
If the token expires, use the refresh token to get a new one.

üîç Example Use Case
Let‚Äôs say you want users to log in to your app using Google:

You request scopes like email and profile.

After login, you get their name, email, and profile picture‚Äîwithout ever seeing their password.

üß† Pro Tips
    * Use Google‚Äôs OAuth libraries for your platform (Node.js, Python, etc.) 
        to simplify implementation.
    * Always store refresh tokens securely.
    * Use incremental authorization‚Äîask for more scopes only when needed.