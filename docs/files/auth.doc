* npm init -y  --> create node modules
* npm install express cookie-parser mailtrap bcryptjs dotenv jsonwebtoken crypto // for express
* npm install nodemon -D
* npm install dotenv
* npm install fastify @fastify/jwt @fastify/cookie  bcryptjs @fastify/cors(optional)
    jwt: for JSON web tokens(for cross origin resource sharing)



----> structrue :
    src:
        * controllers
        * models
        * routes
        * db
        app.js
        .env
        .gitignore



-----> How to configure dotenv:
Location of .env	
* At project root	          ---->     dotenv.config();
* Inside backend/ folder	  ---->     dotenv.config({ path: './backend/.env' });



------> 🔑 Key point
Situation	Should you use async/await?  
Only sync calls (better-sqlite3, basic logic)	        ❌ No need for async.
Any async operation (bcrypt, fetch, external API)	  ✅ Yes, use async and await




-------> JWT(Json Web Token)
* 🔑 JWT = stateless authentication No need to store user sessions on the server; JWT contains all necessary data.
* Process overview
 ----(A) Signup
    User registers ➔ password is hashed ➔ saved in DB ➔ JWT is generated ➔ sent to user.
 ----(B) Login
    User submits email/password ➔ server verifies ➔ generates JWT ➔ sends to user.
 ----(C) Protected route
    User sends request with JWT ➔ server verifies token ➔ allows access.

* JWT_SECRET=pingpongsupersecretkey  --->   ✔️ Easy for local testing
                                    ❌ Not secure for production
* JWT_SECRET=9h9!$zO@7Qf3p#LmV2*Ejr&Bw^Ks6d4NxZ0t+1Yc8gHb5U
        ----->  ✔️ Hard to guess
                ✔️ Mix of uppercase, lowercase, numbers, symbols
* fastify.register(fastifyJwt, {secret: process.env.JWT_SECRET});
    ---> fastify.register(jwt, {...}) is registering the JWT plugin with Fastify.
    - You’re telling Fastify:
    “Hey Fastify, use the fastify-jwt plugin, and here is my secret key for signing and verifying tokens.
* fastify.register(fastifyCookie);
    ----> Without registering fastify-cookie, you cannot use reply.setCookie() or read request.cookies



-------> order is important
fastify.register(fastifyJwt, { secret: process.env.JWT_SECRET });
fastify.register(fastifyCookie);

* fastify.register(routes, { prefix: '/backend' });
* fastifyJwt ➔ Adds fastify.jwt methods to your server instance
* fastifyCookie ➔ Adds request.cookies and reply.setCookie methods
* Routes ➔ Use these plugins, so they must be registered after the plugins






---------> nodemailer
✨ 🔑 1. What is email verification?
    ✅ Generate a unique verification token
    ✅ Send it to their email as a clickable verification link
    ✅ When they click it, mark their account as verified in your DB

✅ 2. Install Nodemailer
    npm install nodemailer

🎯 When to use Nodemailer in authentication :
    a- Signup email verification
        Send a verification link with a unique token
    b- Password reset
        Send a reset link with a secure token
    c- (Optional) Login alerts or 2FA codes

🔐 🔑 Best practices for Nodemailer in authentication
A- Use an email provider suited for production:
    ⚠️ Avoid personal Gmail in production (it has strict sending limits and spam risks).
    Instead use:
        * SendGrid (free tier generous, easy setup)
        * Mailgun
        * Amazon SES
        * Brevo (Sendinblue)
B. Use environment variables for credentials
    ✔️ Never hard-code email user/password. Store them in .env:
C. Use a utility file for mailer setup
    ✔️ Example: utils/mailer.js
D. Generate secure tokens
    Use crypto.randomBytes to generate tokens for email verification or password reset.

Store token hashed in DB if highly sensitive (for password reset).


🔧 3. Setup Nodemailer transporter :  mailer.js



📝 4. Modify your users table
ALTER TABLE USERS ADD COLUMN isVerified INTEGER DEFAULT 0;
ALTER TABLE USERS ADD COLUMN verificationToken TEXT;

🔑 5. Generate a unique verification token


